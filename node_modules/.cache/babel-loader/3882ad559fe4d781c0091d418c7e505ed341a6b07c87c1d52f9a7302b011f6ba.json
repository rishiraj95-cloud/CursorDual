{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rich01\\\\Desktop\\\\CursorDual\\\\src\\\\components\\\\FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { Box, Button, Text, useToast } from '@chakra-ui/react';\nimport Papa from 'papaparse';\nimport { calculateDefectLeakage, calculateCodeCoverage, calculatePerformanceLeakage, calculateBugsPerPhase } from '../utils/calculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onDataProcessed\n}) => {\n  _s();\n  const toast = useToast();\n  const handleFileUpload = useCallback(event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: results => {\n          try {\n            const data = results.data;\n            const metrics = {\n              defectLeakageRate: calculateDefectLeakage(data),\n              codeCoverage: calculateCodeCoverage(data),\n              performanceLeakage: calculatePerformanceLeakage(data),\n              bugsPerPhase: calculateBugsPerPhase(data)\n            };\n            onDataProcessed(metrics, data);\n          } catch (error) {\n            toast({\n              title: 'Error processing file',\n              description: 'Please check the file format and try again',\n              status: 'error',\n              duration: 5000\n            });\n          }\n        },\n        header: true\n      });\n    }\n  }, [onDataProcessed, toast]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: 4,\n      children: \"Upload your QA metrics spreadsheet (CSV format)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        display: 'none'\n      },\n      id: \"file-upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      as: \"label\",\n      htmlFor: \"file-upload\",\n      colorScheme: \"blue\",\n      children: \"Choose File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"a0x6332T3BtX8CQoYuq4FuN9v9s=\", false, function () {\n  return [useToast];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useCallback","Box","Button","Text","useToast","Papa","calculateDefectLeakage","calculateCodeCoverage","calculatePerformanceLeakage","calculateBugsPerPhase","jsxDEV","_jsxDEV","FileUpload","onDataProcessed","_s","toast","handleFileUpload","event","_event$target$files","file","target","files","parse","complete","results","data","metrics","defectLeakageRate","codeCoverage","performanceLeakage","bugsPerPhase","error","title","description","status","duration","header","children","mb","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","display","id","as","htmlFor","colorScheme","_c","$RefreshReg$"],"sources":["C:/Users/rich01/Desktop/CursorDual/src/components/FileUpload.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { Box, Button, Text, useToast } from '@chakra-ui/react';\r\nimport Papa from 'papaparse';\r\nimport { QAMetrics } from '../types';\r\nimport {\r\n  calculateDefectLeakage,\r\n  calculateCodeCoverage,\r\n  calculatePerformanceLeakage,\r\n  calculateBugsPerPhase,\r\n} from '../utils/calculations';\r\n\r\ninterface FileUploadProps {\r\n  onDataProcessed: (metrics: QAMetrics, data: any[]) => void;\r\n}\r\n\r\nconst FileUpload: React.FC<FileUploadProps> = ({ onDataProcessed }) => {\r\n  const toast = useToast();\r\n\r\n  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (results) => {\r\n          try {\r\n            const data = results.data as any[];\r\n            const metrics: QAMetrics = {\r\n              defectLeakageRate: calculateDefectLeakage(data),\r\n              codeCoverage: calculateCodeCoverage(data),\r\n              performanceLeakage: calculatePerformanceLeakage(data),\r\n              bugsPerPhase: calculateBugsPerPhase(data),\r\n            };\r\n            onDataProcessed(metrics, data);\r\n          } catch (error) {\r\n            toast({\r\n              title: 'Error processing file',\r\n              description: 'Please check the file format and try again',\r\n              status: 'error',\r\n              duration: 5000,\r\n            });\r\n          }\r\n        },\r\n        header: true,\r\n      });\r\n    }\r\n  }, [onDataProcessed, toast]);\r\n\r\n  return (\r\n    <Box>\r\n      <Text mb={4}>Upload your QA metrics spreadsheet (CSV format)</Text>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ display: 'none' }}\r\n        id=\"file-upload\"\r\n      />\r\n      <Button as=\"label\" htmlFor=\"file-upload\" colorScheme=\"blue\">\r\n        Choose File\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FileUpload; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAC9D,OAAOC,IAAI,MAAM,WAAW;AAE5B,SACEC,sBAAsB,EACtBC,qBAAqB,EACrBC,2BAA2B,EAC3BC,qBAAqB,QAChB,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM/B,MAAMC,UAAqC,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;EAExB,MAAMY,gBAAgB,GAAGhB,WAAW,CAAEiB,KAA0C,IAAK;IAAA,IAAAC,mBAAA;IACnF,MAAMC,IAAI,IAAAD,mBAAA,GAAGD,KAAK,CAACG,MAAM,CAACC,KAAK,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;IACpC,IAAIC,IAAI,EAAE;MACRd,IAAI,CAACiB,KAAK,CAACH,IAAI,EAAE;QACfI,QAAQ,EAAGC,OAAO,IAAK;UACrB,IAAI;YACF,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAa;YAClC,MAAMC,OAAkB,GAAG;cACzBC,iBAAiB,EAAErB,sBAAsB,CAACmB,IAAI,CAAC;cAC/CG,YAAY,EAAErB,qBAAqB,CAACkB,IAAI,CAAC;cACzCI,kBAAkB,EAAErB,2BAA2B,CAACiB,IAAI,CAAC;cACrDK,YAAY,EAAErB,qBAAqB,CAACgB,IAAI;YAC1C,CAAC;YACDZ,eAAe,CAACa,OAAO,EAAED,IAAI,CAAC;UAChC,CAAC,CAAC,OAAOM,KAAK,EAAE;YACdhB,KAAK,CAAC;cACJiB,KAAK,EAAE,uBAAuB;cAC9BC,WAAW,EAAE,4CAA4C;cACzDC,MAAM,EAAE,OAAO;cACfC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ;QACF,CAAC;QACDC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACvB,eAAe,EAAEE,KAAK,CAAC,CAAC;EAE5B,oBACEJ,OAAA,CAACV,GAAG;IAAAoC,QAAA,gBACF1B,OAAA,CAACR,IAAI;MAACmC,EAAE,EAAE,CAAE;MAAAD,QAAA,EAAC;IAA+C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnE/B,OAAA;MACEgC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,MAAM;MACbC,QAAQ,EAAE7B,gBAAiB;MAC3B8B,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAC3BC,EAAE,EAAC;IAAa;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,eACF/B,OAAA,CAACT,MAAM;MAAC+C,EAAE,EAAC,OAAO;MAACC,OAAO,EAAC,aAAa;MAACC,WAAW,EAAC,MAAM;MAAAd,QAAA,EAAC;IAE5D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA9CIF,UAAqC;EAAA,QAC3BR,QAAQ;AAAA;AAAAgD,EAAA,GADlBxC,UAAqC;AAgD3C,eAAeA,UAAU;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}